services:
  proxy-server:
    image: tientungnguyen/proxy-server-image-test:0.0.1
    container_name: proxy-server
    ports:
      - "1502:1502"
    environment:
      - PROXY_SERVER_NAME=proxy-server
      - MODBUS_SERVER_NAME=host.docker.internal
    volumes:
      - modbus-network-data:/app/logs
    command: sh -c "python StartProxyServer.py > /app/logs/proxy-server.log 2>&1"
    privileged: true
    networks:
      modbus-network:
        ipv4_address: 172.20.0.11  # Assign a static IP address
  modbus-client:
    image: tientungnguyen/modbus-client-simulation-test-image:0.0.1
    container_name: modbus-client
    ports:
      - "3000:3000"
    environment:
      - MODBUS_CLIENT_NAME=modbus-client
      - PROXY_SERVER_NAME=proxy-server
      - MODBUS_CLIENT_PORT=3000
    depends_on:
      - proxy-server
    volumes:
      - modbus-network-data:/app/logs
    command: sh -c "python StartClient.py > /app/logs/modbus-client.log 2>&1"
    privileged: true
    networks:
      modbus-network:
        ipv4_address: 172.20.0.12  # Assign a static IP address
  segmentAPaketCapture:
    image: corfr/tcpdump
    network_mode: "service:modbus-client"
    volumes:
      - modbus-network-data:/tcpdump
    command: [ "-v", "-i", "eth0", "-s", "0", "-B", "4096", "-w", "/tcpdump/SegmentA.pcap" ]
  segmentBPaketCapture:
    image: corfr/tcpdump
    network_mode: "service:proxy-server"
    volumes:
      - modbus-network-data:/tcpdump
    command: [ "-v", "-i", "eth0", "-s", "0", "-B", "4096", "-w", "/tcpdump/SegmentB.pcap" ]


volumes:
  modbus-network-data:

networks:
  modbus-network:   # Define the custom network
    driver: bridge  # Optional, default driver is 'bridge'
    ipam:
      config:
        - subnet : 172.20.0.0/16  #Define a subnet for the network